# frozen_string_literal: true

json = {
  meta: {
    current_page: @task_groups.current_page,
    total_pages: @task_groups.total_pages,
    count: @task_groups.count
  }
}

# rubocop:disable Metrics/BlockLength
json[:data] = @task_groups.map do |task_group|
  user = {
    uuid: task_group.user.uuid,
    username: task_group.user.username,
    first_name: task_group.user.first_name,
    last_name: task_group.user.last_name,
    streak: task_group.user.streak,
    avatar_url: task_group.user.avatar_url
  }

  v = {
    uuid: task_group.uuid,
    created_at: task_group.created_at,
    updated_at: task_group.updated_at,
    user: user
  }

  tasks = task_group.tasks
  tasks = tasks.where(state: params[:state]) if params[:state].present?

  v[:tasks] = tasks.sort_by(&:created_at).reverse!.map do |task|
    t = {
      uuid: task.uuid,
      content: task.content,
      state: task.state,
      source: task.source,
      created_at: task.created_at,
      updated_at: task.updated_at,
      user: user
    }

    t[:projects] = task.projects.map do |project|
      {
        uuid: project.uuid,
        slug: project.slug,
        name: project.name,
        main_color: project.main_color,
        avatar_url: project.avatar_url,
        url: project.url
      }
    end

    t[:mentions] = task.mentions.map do |mention|
      {
        username: mention.username,
        first_name: mention.first_name,
        last_name: mention.last_name,
        avatar_url: mention.avatar_url
      }
    end

    t[:metrics] = {
      comments: Rails.cache.fetch([task, :comments]) do
        task.user_comments
      end,
      likes: Rails.cache.fetch([task, :likes]) do
        task.user_likes
      end
    }

    t[:images] = task.images.map do |image|
      {
        uuid: image.uuid,
        url: Rails.application.routes.url_helpers.url_for(image),
        thumbnail_url: Rails.application.routes.url_helpers.url_for(if image.variable?
                                                                      image.variant(resize_to_fill: [
                                                                    720, 405
                                                                    ])
                                                                    else
                                                                      image
                                                                    end)
      }
    end

    t
  end

  v
end
# rubocop:enable Metrics/BlockLength

json
